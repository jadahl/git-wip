#!/bin/bash

# Copyright â“’ 2016 Mattias Bengtsson
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with This program.  If not, see <http://www.gnu.org/licenses/>.
#
# Author: Mattias Bengtsson <mattias.jc.bengtsson@gmail.com>

# git-wip makes it easier to work with wip-branches

function _help-flag {
    [[ " ${@} " == *" --help "* ]] || [[ " ${@} " == *" -h "* ]]
}

function auto-squash {
    if _help-flag "${@}"; then
        echo "Usage: git wip auto-squash [rebase-flags]"
        echo
        echo "Short-hand for:"
        echo "  EDITOR=true git rebase -i --autosquash [rebase-flags] <rebase-point>"
    else
        EDITOR=true git rebase -i --autosquash "${@}" "$(rebase-point)"
    fi
}

function log {
    if _help-flag "${@}"; then
        echo "Usage: git wip reapply [rebase-flags]"
        echo
        echo "Short-hand for:"
        echo "  git log [rebase-flags] <rebase-point>.."
    else
        git log "${@}" "$(rebase-point)"..
    fi
}

function rebase-point {
    for ref in $(git rev-list --parents "HEAD"); do
        if [ "$(git branch --contains "${ref}" | wc -l)" -gt 1 ]; then
            echo "${ref}"
            return
        fi
    done
}

function reapply {
    if _help-flag "${@}"; then
        echo "Usage: git wip reapply [rebase-flags]"
        echo
        echo "Short-hand for:"
        echo "  git rebase -i [rebase-flags] <rebase-point>"
    else
        git rebase -i "${@}" "$(rebase-point)"
    fi
}

arg="${1}"
shift
case "${arg}" in
    auto-squash)
        auto-squash "${@}"
        ;;
    log)
        log "${@}"
        ;;
    reapply)
        reapply "${@}"
        ;;
    rebase-point)
        rebase-point "${@}"
        ;;
    *)
        echo "Usage: git wip [command] [<option>]"
        echo
        echo "  git wip helps you modify commits since the latest branch-point"
        echo "  All commands work only on the commits unique to this branch"
        echo
        echo "Commands:"
        echo "  auto-squash         Automatically squash all squash! and fixup! commits"
        echo "  log                 Show commit logs"
        echo "  reapply             Reapply all commits using an interactive rebase"
        echo "  rebase-point        Get the parent of the first commit unique for this branch"
        exit 2
        ;;
esac
